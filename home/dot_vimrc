" ========= Plugins =========
call plug#begin('~/.vim/plugged')

" LSP-like IntelliSense
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'fatih/vim-go'

" Project root auto-CD
Plug 'airblade/vim-rooter'

" Fast file finder & project search
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Git essentials
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Better file explorer on top of netrw
Plug 'tpope/vim-vinegar'

Plug 'mhinz/vim-startify'

Plug 'tpope/vim-commentary'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'dunstontc/vim-vscode-theme'

call plug#end()

" ========= Basics =========
filetype plugin indent on
syntax on
colorscheme dark_plus
set nocompatible
set hidden
set number
set updatetime=300
set noundofile
set completeopt=menuone,noinsert,noselect
set wildmode=longest:full,full
set ignorecase smartcase incsearch hlsearch
set wrap
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set linebreak
set termguicolors
set background=dark
set nobackup
set nowritebackup
set noswapfile
set autoread
set signcolumn=number
set balloondelay=250
set backspace=2
set timeoutlen=1000 ttimeoutlen=0
set showcmd
set splitbelow
set splitright

set mouse=a
set ttymouse=sgr

let mapleader = ","

nnoremap <silent> <Tab>   :bnext<CR>
nnoremap <silent> <S-Tab> :bprevious<CR>
nmap <leader>o m`o<Esc>``
nmap <leader>O m`O<Esc>``
noremap <leader>p "*p
noremap <leader>P "*P
vnoremap Y "*y

tnoremap <Esc> <C-w>N

" ========= FZF mappings =========
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fg :Rg<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>/ :BLines<CR>

" Make :Files show hidden files but ignore .git
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow -g "!.git/"'

" ========= Rooter (auto cd to repo root) =========
let g:rooter_patterns = ['go.work', 'go.mod', '.git', '.hg', '.svn']
let g:rooter_change_directory_for_non_project_files = 'current'
" Use global :cd so a single vim instance tracks one main project directory
let g:rooter_cd_cmd = 'cd'

" ========= Startify =========
let g:startify_change_to_dir = 1
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1

" ========= Coc =========
let g:coc_global_extensions = ['coc-json', 'coc-yaml', 'coc-snippets', 'coc-pairs']

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <Tab>   coc#pum#visible() ? coc#pum#next(1)  : "\<Tab>"
inoremap <silent><expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1)  : "\<S-Tab>"

augroup GoCocKeys
  autocmd!
  autocmd FileType go nmap <buffer> gd <Plug>(coc-definition)
  autocmd FileType go nmap <buffer> gy <Plug>(coc-type-definition)
  autocmd FileType go nmap <buffer> gr <Plug>(coc-references)
  autocmd FileType go nmap <buffer> gi <Plug>(coc-implementation)
  autocmd FileType go nmap <buffer> <leader>rn <Plug>(coc-rename)
  autocmd FileType go nmap <buffer> <leader>ca <Plug>(coc-codeaction)
  autocmd FileType go nnoremap <buffer> K :call CocActionAsync('doHover')<CR>
augroup END

nnoremap <silent> [d <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]d <Plug>(coc-diagnostic-next)

nnoremap <leader>sp :CocList outline<CR>
nnoremap <leader>t :CocList -I symbols<CR>

" Smart <CR>: confirm pum OR split pairs with indent OR normal Coc enter
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : <SID>SmartCR()

function! s:BetweenPair() abort
  let coln = col('.')
  if coln <= 1 | return 0 | endif
  let line = getline('.')
  if coln > len(line) | return 0 | endif
  let prev = line[coln-2]
  let next = line[coln-1]
  return ( (prev ==# '(' && next ==# ')')
        \ || (prev ==# '[' && next ==# ']')
        \ || (prev ==# '{' && next ==# '}') )
endfunction

function! s:SmartCR() abort
  if <SID>BetweenPair()
    " newline, then open a new line above the closer (properly indented)
    return "\<C-g>u\<CR>\<Esc>O"
  endif
  " default enter + Coc's on_enter hook
  return "\<C-g>u\<CR>\<C-r>=coc#on_enter()\<CR>"
endfunction

" ========= vim-go (tools; disable its LSP) =========
let g:go_addtags_options = 'json=omitempty'
let g:go_addtags_transform = 'camelcase'
let g:go_fmt_command = 'gofumpt'
let g:go_imports_mode = 'goimports'

let g:go_auto_type_info = 0
let g:go_def_mapping_enabled = 0
let g:go_doc_keywordprg_enabled = 0
let g:go_doc_popup_window = 0
let g:go_fmt_autosave = 0
let g:go_gopls_enabled = 0
let g:go_highlight_fields = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_functions = 1
let g:go_highlight_types = 1
let g:go_mod_fmt_autosave = 0

" ========= netrw quality-of-life =========
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 25
let g:netrw_keepdir = 0
let g:netrw_browse_split = 0

" ========= Airline =========
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline_powerline_fonts = 1

" ========== Todo Highlights ==========
hi Todo guifg=White guibg=Orange
hi Note guifg=Red guibg=Yellow
hi Hack guifg=Black guibg=Green
hi Warn guifg=White guibg=Red
hi Kludge guifg=#ef42f5 guibg=Black

autocmd BufReadPost,BufNewFile * call matchadd('Todo', '\<TODO\>')
autocmd BufReadPost,BufNewFile * call matchadd('Note', '\<NOTE\>')
autocmd BufReadPost,BufNewFile * call matchadd('Hack', '\<HACK\>')
autocmd BufReadPost,BufNewFile * call matchadd('Warn', '\<WARN\>')
autocmd BufReadPost,BufNewFile * call matchadd('Kludge', '\<kludge\>')
