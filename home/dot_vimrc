" ========= Plugins =========
call plug#begin('~/.vim/plugged')

" LSP-like IntelliSense
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Linting (golangci-lint, markdownlint, yamllint, etc.)
Plug 'dense-analysis/ale'

" Project root auto-CD
Plug 'airblade/vim-rooter'

" Fast file finder & project search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git essentials
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Better file explorer on top of netrw
Plug 'tpope/vim-vinegar'

Plug 'mhinz/vim-startify'

Plug 'tpope/vim-commentary'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'dunstontc/vim-vscode-theme'

call plug#end()

" ========= Basics =========
filetype plugin indent on
syntax on
colorscheme dark_plus
set nocompatible
set hidden
set number
set updatetime=300
set noundofile
set completeopt=menuone,noinsert,noselect
set wildmode=longest:full,full
set ignorecase smartcase incsearch hlsearch
set wrap
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set linebreak
set termguicolors
set background=dark
set nobackup
set nowritebackup
set noswapfile
set autoread
set signcolumn=number
set balloondelay=250
set backspace=2
set timeoutlen=1000 ttimeoutlen=0
set showcmd

set mouse=a
set ttymouse=sgr

let mapleader = ","

nnoremap <silent> <Tab>   :bnext<CR>
nnoremap <silent> <S-Tab> :bprevious<CR>
nmap <leader>o m`o<Esc>``
nmap <leader>O m`O<Esc>``
noremap <leader>p "*p
noremap <leader>P "*P
vnoremap Y "*y

" ========= FZF mappings =========
nnoremap <C-p> :Files<CR>
nnoremap <leader>fg :Rg<CR>
nnoremap <leader>fb :Buffers<CR>

" Make :Files show hidden files but ignore .git
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow -g "!.git/"'

" ========= Rooter (auto cd to repo root) =========
let g:rooter_patterns = ['go.work', 'go.mod', '.git', '.hg', '.svn']
let g:rooter_change_directory_for_non_project_files = 'current'
" Use global :cd so a single vim instance tracks one main project directory
let g:rooter_cd_cmd = 'cd'

" ========= Startify =========
let g:startify_change_to_dir = 1
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1

" ========= ALE (linting/format helpers) =========
let g:ale_linters = {
\ 'go': ['golangci-lint'],
\ 'markdown': ['markdownlint'],
\ 'yaml': ['yamllint'],
\}
let g:ale_go_golangci_lint_options = '--path-mode=abs --timeout=30s --fast'
let g:ale_virtualtext_cursor = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '•'
" Don't duplicate format-on-save here (Coc will format); keep ALE for diagnostics
let g:ale_fix_on_save = 0
let g:ale_completion_enabled = 0

" ========= Coc =========
let g:coc_global_extensions = ['coc-json', 'coc-yaml', 'coc-snippets', 'coc-pairs']

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <Tab>   coc#pum#visible() ? coc#pum#next(1)  : "\<Tab>"
inoremap <silent><expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1)  : "\<S-Tab>"

" Go-to, rename, code actions
augroup GoCocKeys
  autocmd!
  autocmd FileType go nmap <buffer> gd <Plug>(coc-definition)
  autocmd FileType go nmap <buffer> gy <Plug>(coc-type-definition)
  autocmd FileType go nmap <buffer> gr <Plug>(coc-references)
  autocmd FileType go nmap <buffer> gi <Plug>(coc-implementation)
  autocmd FileType go nmap <buffer> <leader>rn <Plug>(coc-rename)
  autocmd FileType go nmap <buffer> <leader>ca <Plug>(coc-codeaction)
  autocmd FileType go nnoremap <buffer> K :call CocActionAsync('doHover')<CR>
augroup END

" Diagnostics in floating window
nnoremap <silent> K :call CocActionAsync('doHover')<CR>
nnoremap <silent> [d <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]d <Plug>(coc-diagnostic-next)

" Format on save for Go (uses gopls with gofumpt and organize imports)
autocmd BufWritePre *.go :silent! call CocAction('format')

" ========= netrw quality-of-life =========
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 25
let g:netrw_keepdir = 0
let g:netrw_browse_split = 0

" ========= Airline =========
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline_powerline_fonts = 1

" ========== Todo Highlights ==========
hi Todo guifg=White guibg=Orange
hi Note guifg=Red guibg=Yellow
hi Hack guifg=Black guibg=Green
hi Warn guifg=White guibg=Red
hi Kludge guifg=#ef42f5 guibg=Black

autocmd BufReadPost,BufNewFile * call matchadd('Todo', '\<TODO\>')
autocmd BufReadPost,BufNewFile * call matchadd('Note', '\<NOTE\>')
autocmd BufReadPost,BufNewFile * call matchadd('Hack', '\<HACK\>')
autocmd BufReadPost,BufNewFile * call matchadd('Warn', '\<WARN\>')
autocmd BufReadPost,BufNewFile * call matchadd('Kludge', '\<kludge\>')
